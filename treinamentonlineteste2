/*
TreinamentoOnline ‚Äì Plataforma de Artes Marciais
================================================

Este reposit√≥rio cont√©m um esqueleto completo de aplica√ß√£o **Next.js 14 (App¬†Router)** com **TypeScript**, **Tailwind CSS**, **shadcn/ui**, **Lucide Icons**, **Stripe** para assinaturas mensais e **Supabase** para autentica√ß√£o, banco de dados em tempo‚Äëreal e storage dos coment√°rios.

> **Objetivo**: Oferecer aulas gravadas de artes marciais em um ambiente de est√©tica oriental chamativa, permitir cadastro de infoprodutos vendidos por assinatura mensal via Stripe, restringir acesso √†s disciplinas somente a alunos adimplentes e fornecer um mural de intera√ß√£o (coment√°rios) entre alunos e professor.

> **Como usar**: Siga o passo‚Äëa‚Äëpasso do README logo abaixo para rodar localmente e fazer deploy.

--------------------------------------------------------------------------------

üìÇ **Estrutura de Pastas (resumida)**
```text
/treinamentoonline
 ‚îú‚îÄ‚îÄ app
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ layout.tsx            # Layout raiz (App¬†Router)
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ page.tsx              # Landing page 
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ (auth)
 ‚îÇ¬†¬† ‚îÇ   ‚îú‚îÄ‚îÄ login/page.tsx    # P√°gina de login/cadastro
 ‚îÇ¬†¬† ‚îÇ   ‚îî‚îÄ‚îÄ dashboard/page.tsx# Dashboard do aluno
 ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ aulas/[slug]/page.tsx # Player de aulas + coment√°rios
 ‚îú‚îÄ‚îÄ components
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Navbar.tsx
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Hero.tsx
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ProductGrid.tsx
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ CheckoutButton.tsx
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ VideoPlayer.tsx
 ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Comments.tsx
 ‚îú‚îÄ‚îÄ lib
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ supabase.ts           # Cliente Supabase (browser & server)
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ stripe.ts             # Inicializa√ß√£o Stripe SDK
 ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ auth.ts               # Helper de sess√£o via Supabase
 ‚îú‚îÄ‚îÄ database
 ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ schema.sql            # Tabelas de coment√°rios & controle de assinatura
 ‚îú‚îÄ‚îÄ pages/api
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ stripe
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ webhook.ts        # Webhook que atualiza status de assinatura
 ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ checkout_sessions.ts  # Cria sess√£o de pagamento Stripe
 ‚îú‚îÄ‚îÄ public
 ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ images/               # Logos e artes orientais
 ‚îú‚îÄ‚îÄ styles
 ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ globals.css           # Tailwind + customiza√ß√µes orientais
 ‚îú‚îÄ‚îÄ tailwind.config.ts
 ‚îú‚îÄ‚îÄ next.config.mjs
 ‚îú‚îÄ‚îÄ .env.example
 ‚îî‚îÄ‚îÄ README.md
```

--------------------------------------------------------------------------------

üìÑ **README.md (trecho inic.)**
```markdown
# TreinamentoOnline ü•ã

Plataforma de treino de artes marciais 100¬†% online.

## Requisitos
- Node¬†>=¬†18
- PostgreSQL (ou use Supabase gratuito)
- Conta Stripe (modo¬†test)

## Instala√ß√£o
```bash
pnpm install # ou npm¬†install
pnpm dev
```
```
(README continua com instru√ß√µes de deploy e vari√°veis¬†.env ‚Äì vide arquivo completo no repo)
```

--------------------------------------------------------------------------------

üóÑÔ∏è **database/schema.sql** (execute no Supabase)
```sql
-- Tabela de coment√°rios
create table if not exists public.comments (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references auth.users not null,
  lesson_slug text not null,
  content text not null,
  created_at timestamptz default now()
);

-- View simples para coment√°rios em tempo‚Äëreal
alter table public.comments enable row level security;
create policy "Comments apenas de assinantes" on public.comments
  for select using (auth.role() = 'authenticated');

-- Tabela que mapeia assinatura Stripe ao usu√°rio
create table if not exists public.stripe_subscriptions (
  id text primary key,
  user_id uuid references auth.users on delete cascade,
  status text,
  current_period_end timestamptz
);
```

--------------------------------------------------------------------------------

üì¶ **lib/supabase.ts**
```ts
import { createBrowserClient, createServerClient } from "@supabase/ssr";
export const supabaseBrowser = () =>
  createBrowserClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  );
export const supabaseServer = (headers: Headers, cookies: any) =>
  createServerClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    { headers, cookies }
  );
```

--------------------------------------------------------------------------------

üì¶ **lib/stripe.ts**
```ts
import Stripe from "stripe";
export const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: "2023-10-16",
});
```

--------------------------------------------------------------------------------

üß© **app/layout.tsx**
```tsx
import "../styles/globals.css";
import { Navbar } from "@/components/Navbar";

export const metadata = {
  title: "TreinamentoOnline ‚Äì Artes Marciais",
  description: "Aulas orientais de artes marciais online",
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="pt-BR" className="scroll-smooth">
      <body className="min-h-screen bg-gradient-to-br from-red-900 via-black to-red-950 text-gray-200">
        <Navbar />
        <main className="container mx-auto px-4 py-6">{children}</main>
      </body>
    </html>
  );
}
```

--------------------------------------------------------------------------------

üß© **components/Navbar.tsx**
```tsx
"use client";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { LogOut, User } from "lucide-react";
import { Button } from "@/components/ui/button";
import { supabaseBrowser } from "@/lib/supabase";

export function Navbar() {
  const pathname = usePathname();
  const supabase = supabaseBrowser();
  async function signOut() {
    await supabase.auth.signOut();
  }
  return (
    <nav className="flex items-center justify-between py-4">
      <Link href="/" className="text-3xl font-extrabold tracking-widest text-yellow-400">
        ü•ã Treinamento<span className="text-red-500">Online</span>
      </Link>
      <div className="flex gap-4 items-center">
        {pathname !== "/(auth)/login" && (
          <Link href="/(auth)/login" className="hover:underline">
            <User className="inline mr-1" size={18} /> √Årea do Aluno
          </Link>
        )}
        <Button variant="ghost" onClick={signOut} className="text-sm">
          <LogOut size={16} className="mr-1" /> Sair
        </Button>
      </div>
    </nav>
  );
}
```

--------------------------------------------------------------------------------

üß© **components/ProductGrid.tsx** (home‚Äëpage ‚Äì exibir infoprodutos Stripe)
```tsx
import { GetServerSideProps } from "next";
import { stripe } from "@/lib/stripe";
import { CheckoutButton } from "@/components/CheckoutButton";

export async function ProductGrid() {
  const products = await stripe.prices.list({ expand: ["data.product"] });
  return (
    <section className="grid sm:grid-cols-2 lg:grid-cols-3 gap-6 mt-10">
      {products.data.map((price) => {
        const product = price.product as Stripe.Product;
        return (
          <div
            key={price.id}
            className="bg-gradient-to-br from-yellow-800 to-red-800 rounded-2xl p-6 shadow-lg flex flex-col justify-between"
          >
            <h3 className="text-xl font-bold mb-2">{product.name}</h3>
            <p className="flex-1 text-sm opacity-80 mb-4">{product.description}</p>
            <CheckoutButton priceId={price.id} />
          </div>
        );
      })}
    </section>
  );
}
```

--------------------------------------------------------------------------------

üß© **components/CheckoutButton.tsx** (client component)
```tsx
"use client";
import { loadStripe } from "@stripe/stripe-js";
import { useRouter } from "next/navigation";

export function CheckoutButton({ priceId }: { priceId: string }) {
  const router = useRouter();
  async function handleClick() {
    const res = await fetch("/api/checkout_sessions", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ priceId }),
    });
    const { sessionId } = await res.json();
    const stripe = await loadStripe(process.env.NEXT_PUBLIC_STRIPE_PK!);
    await stripe?.redirectToCheckout({ sessionId });
  }
  return (
    <button
      onClick={handleClick}
      className="bg-yellow-400 hover:bg-yellow-500 text-black font-semibold py-2 px-4 rounded-lg shadow-md transition"
    >
      Assinar
    </button>
  );
}
```

--------------------------------------------------------------------------------

üß© **app/aulas/[slug]/page.tsx** (player + coment√°rios)
```tsx
import { supabaseServer } from "@/lib/supabase";
import { VideoPlayer } from "@/components/VideoPlayer";
import { Comments } from "@/components/Comments";
import { stripe } from "@/lib/stripe";

export default async function AulaPage({ params }: { params: { slug: string } }) {
  const { slug } = params;
  const supabase = supabaseServer();
  const {
    data: { session },
  } = await supabase.auth.getSession();

  // Checa assinatura ativa
  const { data: sub } = await supabase
    .from("stripe_subscriptions")
    .select("status,current_period_end")
    .eq("user_id", session?.user.id)
    .single();

  if (!sub || sub.status !== "active") {
    // Redireciona
    return <p className="text-center mt-20">Acesso restrito a assinantes ativos.</p>;
  }

  return (
    <section className="space-y-8">
      <VideoPlayer lessonSlug={slug} />
      <Comments lessonSlug={slug} userId={session!.user.id} />
    </section>
  );
}
```

--------------------------------------------------------------------------------

üß© **components/Comments.tsx** (tempo‚Äëreal)
```tsx
"use client";
import { useEffect, useState } from "react";
import { supabaseBrowser } from "@/lib/supabase";

interface Comment {
  id: string;
  content: string;
  created_at: string;
  user_id: string;
}

export function Comments({ lessonSlug, userId }: { lessonSlug: string; userId: string }) {
  const [comments, setComments] = useState<Comment[]>([]);
  const [text, setText] = useState("");
  const supabase = supabaseBrowser();

  useEffect(() => {
    loadComments();
    const sub = supabase
      .channel("public:comments")
      .on("postgres_changes", { event: "INSERT", schema: "public", table: "comments" }, (payload) => {
        setComments((prev) => [payload.new as Comment, ...prev]);
      })
      .subscribe();
    return () => {
      supabase.removeChannel(sub);
    };
  }, []);

  async function loadComments() {
    const { data } = await supabase
      .from("comments")
      .select("*")
      .eq("lesson_slug", lessonSlug)
      .order("created_at", { ascending: false });
    setComments(data || []);
  }
  async function send() {
    if (!text.trim()) return;
    await supabase.from("comments").insert({ content: text.trim(), lesson_slug: lessonSlug, user_id: userId });
    setText("");
  }

  return (
    <div className="space-y-4">
      <h2 className="text-xl font-bold">Coment√°rios</h2>
      <div className="flex gap-2">
        <input
          value={text}
          onChange={(e) => setText(e.target.value)}
          placeholder="D√∫vida ou coment√°rio..."
          className="flex-1 bg-gray-900 border border-gray-700 rounded-lg px-3 py-2"
        />
        <button onClick={send} className="bg-red-600 hover:bg-red-700 px-4 rounded-lg text-white">
          Enviar
        </button>
      </div>
      <ul className="space-y-2 max-h-80 overflow-y-auto pr-2">
        {comments.map((c) => (
          <li key={c.id} className="bg-black/30 rounded-lg p-3">
            <p className="text-sm opacity-80">{new Date(c.created_at).toLocaleString("pt-BR")}</p>
            <p>{c.content}</p>
          </li>
        ))}
      </ul>
    </div>
  );
}
```

--------------------------------------------------------------------------------

üõ†Ô∏è **pages/api/checkout_sessions.ts** (server action ‚Äì cria sess√£o de pagamento)
```ts
import type { NextApiRequest, NextApiResponse } from "next";
import { stripe } from "@/lib/stripe";
import { supabaseServer } from "@/lib/supabase";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") return res.status(405).end();
  const { priceId } = req.body;
  const supabase = supabaseServer(req.headers as any, req.cookies);
  const {
    data: { session },
  } = await supabase.auth.getSession();
  if (!session) return res.status(401).json({ error: "Not authenticated" });

  const checkoutSession = await stripe.checkout.sessions.create({
    customer_email: session.user.email,
    line_items: [
      {
        price: priceId,
        quantity: 1,
      },
    ],
    mode: "subscription",
    success_url: `${process.env.NEXT_PUBLIC_SITE_URL}/(auth)/dashboard`,
    cancel_url: `${process.env.NEXT_PUBLIC_SITE_URL}/`,
  });
  res.json({ sessionId: checkoutSession.id });
}
```

--------------------------------------------------------------------------------

üõ†Ô∏è **pages/api/stripe/webhook.ts** (atualiza status de assinatura)
```ts
import { NextApiRequest, NextApiResponse } from "next";
import { stripe } from "@/lib/stripe";
import { supabaseServer } from "@/lib/supabase";

const endpointSecret = process.env.STRIPE_WEBHOOK_SECRET!;

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const sig = req.headers["stripe-signature"]!;
  let event: Stripe.Event;
  try {
    event = stripe.webhooks.constructEvent(req.body, sig as string, endpointSecret);
  } catch (err: any) {
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  if (event.type === "customer.subscription.updated" || event.type === "customer.subscription.created") {
    const subscription = event.data.object as Stripe.Subscription;
    const email = (subscription.customer_email || subscription.customer_details?.email) as string;
    const supabase = supabaseServer(req.headers as any, req.cookies);
    const { data: user } = await supabase.from("users").select("id").eq("email", email).single();
    if (user) {
      await supabase.from("stripe_subscriptions").upsert({
        id: subscription.id,
        user_id: user.id,
        status: subscription.status,
        current_period_end: new Date(subscription.current_period_end * 1000).toISOString(),
      });
    }
  }
  res.json({ received: true });
}
```

--------------------------------------------------------------------------------

üé® **tailwind.config.ts** (paleta oriental)
```ts
import { type Config } from "tailwindcss";
export default {
  content: ["./app/**/*.{ts,tsx}", "./components/**/*.{ts,tsx}"],
  theme: {
    extend: {
      fontFamily: {
        sans: ["Noto Sans JP", "sans-serif"],
      },
      colors: {
        primary: {
          500: "#facc15", // amarelo oriental
        },
      },
    },
  },
  plugins: [],
} satisfies Config;
```

--------------------------------------------------------------------------------

üñºÔ∏è **styles/globals.css** (exemplo ‚Äì usa padr√£o de nuvens japonesas)
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  background-image: url('/images/japanese-pattern.svg');
  background-size: 400px;
}
```

--------------------------------------------------------------------------------

üöÄ **Deploy**
- Vercel: configurar NEXT_PUBLIC_SITE_URL, SUPABASE_URL, SUPABASE_ANON_KEY, STRIPE_PK, STRIPE_SECRET_KEY, STRIPE_WEBHOOK_SECRET.
- Stripe: criar *Product* "Assinatura Mensal" com pre√ßo recorrente em BRL, copiar priceId para vari√°veis de ambiente ou salvar no banco.
- Supabase: habilitar Auth (Email) e Storage CDN.
- Webhook: adicionar endpoint `https://<your‚Äësite>/api/stripe/webhook` no Stripe.

--------------------------------------------------------------------------------

üí° **Pr√≥ximos Passos**
1. Ajustar URLs reais de aulas gravadas (v√≠deos podem ficar no Supabase Storage ou Vimeo).
2. Criar fun√ß√£o cron (Edge Function) para revogar acesso ap√≥s `current_period_end`.
3. Se desejar mais gamifica√ß√£o, adicionar ranking de pr√°tica.

*/
